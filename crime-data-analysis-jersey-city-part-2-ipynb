{"metadata": {"language_info": {"mimetype": "text/x-python", "version": "3.5.2", "codemirror_mode": {"version": 3, "name": "ipython"}, "nbconvert_exporter": "python", "file_extension": ".py", "name": "python", "pygments_lexer": "ipython3"}, "kernelspec": {"display_name": "Python [Root]", "name": "Python [Root]", "language": "python"}, "anaconda-cloud": {"environment": null, "summary": "Supervised learning for prediction of crime in jersey city is the objective of the project"}}, "cells": [{"metadata": {}, "source": "# Crime Data Analysis : Jersey City: Part - 2 ", "cell_type": "markdown"}, {"metadata": {}, "source": "### Supervised learning for prediction of crime in jersey city is the objective of the project. \n### The data used for the analysis are real time data (for academic purpose)", "cell_type": "markdown"}, {"metadata": {}, "source": "# Import necessary libraries", "cell_type": "markdown"}, {"outputs": [], "metadata": {"collapsed": true, "trusted": false}, "source": "import numpy as np\nimport pandas as pd\nimport scipy as spy\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import OneHotEncoder\n%matplotlib inline", "execution_count": 70, "cell_type": "code"}, {"metadata": {}, "source": "# Reading processed data from CSV file ", "cell_type": "markdown"}, {"outputs": [{"execution_count": 71, "output_type": "execute_result", "metadata": {}, "data": {"text/plain": "   Unnamed: 0  Occurrence Date  Day of Week  Occurrence Month  Occurrence Day  \\\n0         257                2          2.0               1.0             9.0   \n1         258                2          2.0               1.0             9.0   \n2         259                2          2.0               1.0             9.0   \n3         260                2          2.0               1.0             9.0   \n4         261                2          2.0               1.0             9.0   \n\n   Occurrence_Year  Occurrence Hour  Offense  Sector  Borough  \n0           2006.0              0.0      3.0      17        3  \n1           2006.0              0.0      3.0      14        2  \n2           2006.0              0.0      3.0      12        2  \n3           2006.0              0.0      1.0      10        4  \n4           2006.0              0.0      1.0      12        4  ", "text/html": "<div>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Unnamed: 0</th>\n      <th>Occurrence Date</th>\n      <th>Day of Week</th>\n      <th>Occurrence Month</th>\n      <th>Occurrence Day</th>\n      <th>Occurrence_Year</th>\n      <th>Occurrence Hour</th>\n      <th>Offense</th>\n      <th>Sector</th>\n      <th>Borough</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>257</td>\n      <td>2</td>\n      <td>2.0</td>\n      <td>1.0</td>\n      <td>9.0</td>\n      <td>2006.0</td>\n      <td>0.0</td>\n      <td>3.0</td>\n      <td>17</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>258</td>\n      <td>2</td>\n      <td>2.0</td>\n      <td>1.0</td>\n      <td>9.0</td>\n      <td>2006.0</td>\n      <td>0.0</td>\n      <td>3.0</td>\n      <td>14</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>259</td>\n      <td>2</td>\n      <td>2.0</td>\n      <td>1.0</td>\n      <td>9.0</td>\n      <td>2006.0</td>\n      <td>0.0</td>\n      <td>3.0</td>\n      <td>12</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>260</td>\n      <td>2</td>\n      <td>2.0</td>\n      <td>1.0</td>\n      <td>9.0</td>\n      <td>2006.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>10</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>261</td>\n      <td>2</td>\n      <td>2.0</td>\n      <td>1.0</td>\n      <td>9.0</td>\n      <td>2006.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>12</td>\n      <td>4</td>\n    </tr>\n  </tbody>\n</table>\n</div>"}}], "metadata": {"collapsed": false, "trusted": false}, "source": "crime_data=pd.read_csv(\"C:\\\\Users\\\\rajag\\\\Documents\\\\Python Scripts\\\\machine-learning\\\\JC_num.CSV\")\ncrime_data.head()", "execution_count": 71, "cell_type": "code"}, {"metadata": {}, "source": "# Question: Given Day of week, Sector and borough what kind crime can a person be subject to?", "cell_type": "markdown"}, {"metadata": {}, "source": "# Year 2006:", "cell_type": "markdown"}, {"outputs": [{"execution_count": 72, "output_type": "execute_result", "metadata": {}, "data": {"text/plain": "   Unnamed: 0  Occurrence Date  Day of Week  Occurrence Month  Occurrence Day  \\\n0         257                2          2.0               1.0             9.0   \n1         258                2          2.0               1.0             9.0   \n2         259                2          2.0               1.0             9.0   \n3         260                2          2.0               1.0             9.0   \n4         261                2          2.0               1.0             9.0   \n\n   Occurrence_Year  Occurrence Hour  Offense  Sector  Borough  \n0           2006.0              0.0      3.0      17        3  \n1           2006.0              0.0      3.0      14        2  \n2           2006.0              0.0      3.0      12        2  \n3           2006.0              0.0      1.0      10        4  \n4           2006.0              0.0      1.0      12        4  ", "text/html": "<div>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Unnamed: 0</th>\n      <th>Occurrence Date</th>\n      <th>Day of Week</th>\n      <th>Occurrence Month</th>\n      <th>Occurrence Day</th>\n      <th>Occurrence_Year</th>\n      <th>Occurrence Hour</th>\n      <th>Offense</th>\n      <th>Sector</th>\n      <th>Borough</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>257</td>\n      <td>2</td>\n      <td>2.0</td>\n      <td>1.0</td>\n      <td>9.0</td>\n      <td>2006.0</td>\n      <td>0.0</td>\n      <td>3.0</td>\n      <td>17</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>258</td>\n      <td>2</td>\n      <td>2.0</td>\n      <td>1.0</td>\n      <td>9.0</td>\n      <td>2006.0</td>\n      <td>0.0</td>\n      <td>3.0</td>\n      <td>14</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>259</td>\n      <td>2</td>\n      <td>2.0</td>\n      <td>1.0</td>\n      <td>9.0</td>\n      <td>2006.0</td>\n      <td>0.0</td>\n      <td>3.0</td>\n      <td>12</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>260</td>\n      <td>2</td>\n      <td>2.0</td>\n      <td>1.0</td>\n      <td>9.0</td>\n      <td>2006.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>10</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>261</td>\n      <td>2</td>\n      <td>2.0</td>\n      <td>1.0</td>\n      <td>9.0</td>\n      <td>2006.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>12</td>\n      <td>4</td>\n    </tr>\n  </tbody>\n</table>\n</div>"}}], "metadata": {"collapsed": false, "trusted": false}, "source": "crime_data=crime_data[crime_data.Occurrence_Year == 2006]\ncrime_data.head()", "execution_count": 72, "cell_type": "code"}, {"metadata": {}, "source": "# Feature Selection: Day of Week, Sector, Borough\n# Class Label: Offense", "cell_type": "markdown"}, {"outputs": [], "metadata": {"collapsed": true, "trusted": false}, "source": "X_data=crime_data[['Day of Week','Sector','Borough','Offense']]", "execution_count": 73, "cell_type": "code"}, {"outputs": [{"execution_count": 74, "output_type": "execute_result", "metadata": {}, "data": {"text/plain": "Day of Week    124167\nSector         124167\nBorough        124167\nOffense        124167\ndtype: int64"}}], "metadata": {"collapsed": false, "trusted": false}, "source": "X_data.count()", "execution_count": 74, "cell_type": "code"}, {"metadata": {}, "source": "# Random Sampling: 20000/124167", "cell_type": "markdown"}, {"outputs": [{"execution_count": 75, "output_type": "execute_result", "metadata": {}, "data": {"text/plain": "       Day of Week  Sector  Borough  Offense\n15457          2.0      14        1      3.0\n40099          6.0      16        4      4.0\n78063          2.0      19        1      3.0\n56458          2.0      11        1      3.0\n63385          6.0      16        2      7.0", "text/html": "<div>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Day of Week</th>\n      <th>Sector</th>\n      <th>Borough</th>\n      <th>Offense</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>15457</th>\n      <td>2.0</td>\n      <td>14</td>\n      <td>1</td>\n      <td>3.0</td>\n    </tr>\n    <tr>\n      <th>40099</th>\n      <td>6.0</td>\n      <td>16</td>\n      <td>4</td>\n      <td>4.0</td>\n    </tr>\n    <tr>\n      <th>78063</th>\n      <td>2.0</td>\n      <td>19</td>\n      <td>1</td>\n      <td>3.0</td>\n    </tr>\n    <tr>\n      <th>56458</th>\n      <td>2.0</td>\n      <td>11</td>\n      <td>1</td>\n      <td>3.0</td>\n    </tr>\n    <tr>\n      <th>63385</th>\n      <td>6.0</td>\n      <td>16</td>\n      <td>2</td>\n      <td>7.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"}}], "metadata": {"collapsed": false, "trusted": false}, "source": "rows = np.random.choice(X_data.index.values, 20000)\nsampled_X = X_data.ix[rows]\nsampled_X.head()", "execution_count": 75, "cell_type": "code"}, {"outputs": [{"execution_count": 76, "output_type": "execute_result", "metadata": {}, "data": {"text/plain": "       Offense\n15457      3.0\n40099      4.0\n78063      3.0\n56458      3.0\n63385      7.0", "text/html": "<div>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Offense</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>15457</th>\n      <td>3.0</td>\n    </tr>\n    <tr>\n      <th>40099</th>\n      <td>4.0</td>\n    </tr>\n    <tr>\n      <th>78063</th>\n      <td>3.0</td>\n    </tr>\n    <tr>\n      <th>56458</th>\n      <td>3.0</td>\n    </tr>\n    <tr>\n      <th>63385</th>\n      <td>7.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"}}], "metadata": {"collapsed": false, "trusted": false}, "source": "s_X=sampled_X[['Day of Week','Sector','Borough']]\nsampled_Y=sampled_X[['Offense']]\nsampled_Y.head()", "execution_count": 76, "cell_type": "code"}, {"metadata": {}, "source": "# Convert Data to Matrix Format for Computation:", "cell_type": "markdown"}, {"outputs": [{"execution_count": 77, "output_type": "execute_result", "metadata": {}, "data": {"text/plain": "array([  2.,  14.,   1.])"}}], "metadata": {"collapsed": false, "trusted": false}, "source": "X=s_X.as_matrix()\nX[0]", "execution_count": 77, "cell_type": "code"}, {"metadata": {}, "source": "# One Hot Encoding:\nOne hot encoding transforms categorical features to a format that works better with classification and regression algorithm. Comments: when converting text to numerical value they will be considered as ordinal values, such values could infulence the prediction when applied on an algorithm like SVM or KNN.  ", "cell_type": "markdown"}, {"outputs": [], "metadata": {"collapsed": true, "trusted": false}, "source": "enc = OneHotEncoder()", "execution_count": 78, "cell_type": "code"}, {"outputs": [{"execution_count": 79, "output_type": "execute_result", "metadata": {}, "data": {"text/plain": "OneHotEncoder(categorical_features='all', dtype=<class 'numpy.float64'>,\n       handle_unknown='error', n_values='auto', sparse=True)"}}], "metadata": {"collapsed": false, "trusted": false}, "source": "enc.fit(X)", "execution_count": 79, "cell_type": "code"}, {"outputs": [{"execution_count": 80, "output_type": "execute_result", "metadata": {}, "data": {"text/plain": "array([ 0.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,\n        0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0.,\n        0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0.])"}}], "metadata": {"collapsed": false, "trusted": false}, "source": "X=enc.transform(X).toarray()\nX[0]", "execution_count": 80, "cell_type": "code"}, {"outputs": [{"execution_count": 81, "output_type": "execute_result", "metadata": {}, "data": {"text/plain": "array([ 0.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,\n        0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0.,\n        0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0.])"}}], "metadata": {"collapsed": false, "trusted": false}, "source": "X[0]", "execution_count": 81, "cell_type": "code"}, {"outputs": [{"execution_count": 82, "output_type": "execute_result", "metadata": {}, "data": {"text/plain": "(20000, 40)"}}], "metadata": {"collapsed": false, "trusted": false}, "source": "X.shape", "execution_count": 82, "cell_type": "code"}, {"outputs": [{"execution_count": 83, "output_type": "execute_result", "metadata": {}, "data": {"text/plain": "(20000, 1)"}}], "metadata": {"collapsed": false, "trusted": false}, "source": "Y=sampled_Y.as_matrix()\nY.shape", "execution_count": 83, "cell_type": "code"}, {"outputs": [{"execution_count": 84, "output_type": "execute_result", "metadata": {}, "data": {"text/plain": "(20000,)"}}], "metadata": {"collapsed": false, "trusted": false}, "source": "Y=np.ravel(Y)\nY.shape", "execution_count": 84, "cell_type": "code"}, {"metadata": {}, "source": "# Choosing the Right Algorithm?", "cell_type": "markdown"}, {"metadata": {}, "source": "# Choice 1 : Support Vector Machine\n# Result 1: Computationally Intensive", "cell_type": "markdown"}, {"metadata": {}, "source": "", "cell_type": "markdown"}, {"metadata": {}, "source": "# Choice 2 : Stochastic gradient descent Classifier\nSGD has been successfully applied to large-scale and sparse machine learning problems often encountered in text classification and natural language processing. Given that the data is sparse, the classifiers in this module easily scale to problems with more than 10^5 training examples and more than 10^5 features.", "cell_type": "markdown"}, {"outputs": [{"execution_count": 85, "output_type": "execute_result", "metadata": {}, "data": {"text/plain": "SGDClassifier(alpha=0.0001, average=False, class_weight=None, epsilon=0.1,\n       eta0=0.0, fit_intercept=True, l1_ratio=0.15,\n       learning_rate='optimal', loss='hinge', n_iter=5, n_jobs=1,\n       penalty='l2', power_t=0.5, random_state=None, shuffle=True,\n       verbose=0, warm_start=False)"}}], "metadata": {"collapsed": false, "trusted": false}, "source": "clf = SGDClassifier(loss=\"hinge\", penalty=\"l2\")\nclf.fit(X, Y)", "execution_count": 85, "cell_type": "code"}, {"outputs": [{"name": "stdout", "output_type": "stream", "text": "3:Tuesday,16:Sector G, 3:Borough Queens\n"}, {"execution_count": 86, "output_type": "execute_result", "metadata": {}, "data": {"text/plain": "array([ 0.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,\n        0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0.,\n        0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0.])"}}], "metadata": {"collapsed": false, "trusted": false}, "source": "print(\"3:Tuesday,16:Sector G, 3:Borough Queens\")\nX[0]", "execution_count": 86, "cell_type": "code"}, {"outputs": [{"name": "stderr", "output_type": "stream", "text": "C:\\Users\\rajag\\Anaconda3\\lib\\site-packages\\sklearn\\utils\\validation.py:395: DeprecationWarning: Passing 1d arrays as data is deprecated in 0.17 and will raise ValueError in 0.19. Reshape your data either using X.reshape(-1, 1) if your data has a single feature or X.reshape(1, -1) if it contains a single sample.\n  DeprecationWarning)\n"}, {"execution_count": 87, "output_type": "execute_result", "metadata": {}, "data": {"text/plain": "array([ 3.])"}}], "metadata": {"collapsed": false, "trusted": false}, "source": "clf.predict(X[0])", "execution_count": 87, "cell_type": "code"}, {"metadata": {}, "source": "# Offense: 2 - Fellony Assault", "cell_type": "markdown"}, {"metadata": {}, "source": "# Cross-Validation of SGD Classifier:", "cell_type": "markdown"}, {"outputs": [{"name": "stdout", "output_type": "stream", "text": "[0.30823458827058647, 0.33103344832758363, 0.29252925292529253]\nCross-Validation Score SGD Classifier : 0.310599\n"}], "metadata": {"collapsed": false, "trusted": false}, "source": "X_folds = np.array_split(X, 3)\ny_folds = np.array_split(Y, 3)\nscores = list()\nfor k in range(3):\n# We use 'list' to copy, in order to 'pop' later on\n    X_train = list(X_folds)\n    X_test  = X_train.pop(k)\n    X_train = np.concatenate(X_train)\n    y_train = list(y_folds)\n    y_test  = y_train.pop(k)\n    y_train = np.concatenate(y_train)\n    clf = SGDClassifier(loss=\"hinge\", penalty=\"l2\")\n    scores.append(clf.fit(X_train, y_train).score(X_test, y_test))\n    \nprint(scores)\nmn1=scores\nz1=sum(mn1) / float(len(mn1))\nprint(\"Cross-Validation Score SGD Classifier : %f\" %z1)", "execution_count": 88, "cell_type": "code"}, {"metadata": {}, "source": "# Result 2: \nComputationally fine, but result is of concern so, look for different possibilities", "cell_type": "markdown"}, {"metadata": {}, "source": "# Choice 3: k-Nearest Neighbors algorithm", "cell_type": "markdown"}, {"outputs": [{"execution_count": 89, "output_type": "execute_result", "metadata": {}, "data": {"text/plain": "KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',\n           metric_params=None, n_jobs=1, n_neighbors=160, p=2,\n           weights='uniform')"}}], "metadata": {"collapsed": false, "trusted": false}, "source": "neigh = KNeighborsClassifier(n_neighbors=160)\nneigh.fit(X,Y)", "execution_count": 89, "cell_type": "code"}, {"outputs": [{"name": "stderr", "output_type": "stream", "text": "C:\\Users\\rajag\\Anaconda3\\lib\\site-packages\\sklearn\\utils\\validation.py:395: DeprecationWarning: Passing 1d arrays as data is deprecated in 0.17 and will raise ValueError in 0.19. Reshape your data either using X.reshape(-1, 1) if your data has a single feature or X.reshape(1, -1) if it contains a single sample.\n  DeprecationWarning)\n"}, {"execution_count": 90, "output_type": "execute_result", "metadata": {}, "data": {"text/plain": "array([ 3.])"}}], "metadata": {"collapsed": false, "trusted": false}, "source": "neigh.predict(X[0])", "execution_count": 90, "cell_type": "code"}, {"metadata": {}, "source": "# Offense: \nGrand Larceny", "cell_type": "markdown"}, {"metadata": {}, "source": "# Cross Validation : KNN\nFolds = 3; N=160", "cell_type": "markdown"}, {"outputs": [{"name": "stdout", "output_type": "stream", "text": "[0.36928153592320384, 0.36208189590520473, 0.35388538853885387]\nCross-Validation Score of KNN-3 : 0.361750\n"}], "metadata": {"collapsed": false, "trusted": false}, "source": "X_folds = np.array_split(X, 3)\ny_folds = np.array_split(Y, 3)\nscores = list()\nfor k in range(3):\n# We use 'list' to copy, in order to 'pop' later on\n    X_train = list(X_folds)\n    X_test  = X_train.pop(k)\n    X_train = np.concatenate(X_train)\n    y_train = list(y_folds)\n    y_test  = y_train.pop(k)\n    y_train = np.concatenate(y_train)\n    neigh = KNeighborsClassifier(n_neighbors=160)\n    scores.append(neigh.fit(X_train, y_train).score(X_test, y_test))\nprint(scores)\nmn1=scores\nz1=sum(mn1) / float(len(mn1))\nprint(\"Cross-Validation Score of KNN-3 : %f\" %z1)", "execution_count": 91, "cell_type": "code"}, {"metadata": {}, "source": "# Result 3 : \nThe performance is better, but it is not concrete to come to a conculsion. Is their anything fundamentally wrong with the question? \n##### Yes, Might be, their could be multiple possiblties of crime. ", "cell_type": "markdown"}, {"outputs": [{"execution_count": 92, "output_type": "execute_result", "metadata": {}, "data": {"text/plain": "<matplotlib.axes._subplots.AxesSubplot at 0x15892e620b8>"}}, {"metadata": {}, "output_type": "display_data", "data": {"text/plain": "<matplotlib.figure.Figure at 0x15892e7fc18>", "image/png": "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\nrkJggg==\n"}}], "metadata": {"collapsed": false, "trusted": false}, "source": "crime_data.groupby('Offense').size().plot(kind='bar')", "execution_count": 92, "cell_type": "code"}, {"metadata": {}, "source": "# Choice 4: MultiOutputClassifier - Random Forest", "cell_type": "markdown"}, {"outputs": [], "metadata": {"collapsed": true, "trusted": false}, "source": "from sklearn.datasets import make_classification\nfrom sklearn.multioutput import MultiOutputClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.utils import shuffle", "execution_count": 93, "cell_type": "code"}, {"outputs": [{"execution_count": 94, "output_type": "execute_result", "metadata": {}, "data": {"text/plain": "(20000,)"}}], "metadata": {"collapsed": false, "trusted": false}, "source": "Y.shape", "execution_count": 94, "cell_type": "code"}, {"outputs": [{"execution_count": 95, "output_type": "execute_result", "metadata": {}, "data": {"text/plain": "(20000,)"}}], "metadata": {"collapsed": false, "trusted": false}, "source": "y2 = shuffle(Y, random_state=1)\ny2.shape", "execution_count": 95, "cell_type": "code"}, {"outputs": [{"execution_count": 96, "output_type": "execute_result", "metadata": {}, "data": {"text/plain": "(20000,)"}}], "metadata": {"collapsed": false, "trusted": false}, "source": "y3 = shuffle(y2, random_state=2)\ny3.shape", "execution_count": 96, "cell_type": "code"}, {"outputs": [{"execution_count": 97, "output_type": "execute_result", "metadata": {}, "data": {"text/plain": "(20000, 3)"}}], "metadata": {"collapsed": false, "trusted": false}, "source": "Ya = np.vstack((Y, y2, y3)).T\nYa.shape", "execution_count": 97, "cell_type": "code"}, {"outputs": [], "metadata": {"collapsed": true, "trusted": false}, "source": "forest = RandomForestClassifier(n_estimators=100, random_state=1)\nmulti_target_forest = MultiOutputClassifier(forest, n_jobs=-1)", "execution_count": 98, "cell_type": "code"}, {"outputs": [{"execution_count": 99, "output_type": "execute_result", "metadata": {}, "data": {"text/plain": "MultiOutputClassifier(estimator=RandomForestClassifier(bootstrap=True, class_weight=None, criterion='gini',\n            max_depth=None, max_features='auto', max_leaf_nodes=None,\n            min_impurity_split=1e-07, min_samples_leaf=1,\n            min_samples_split=2, min_weight_fraction_leaf=0.0,\n            n_estimators=100, n_jobs=1, oob_score=False, random_state=1,\n            verbose=0, warm_start=False),\n           n_jobs=-1)"}}], "metadata": {"collapsed": false, "trusted": false}, "source": "multi_target_forest.fit(X, Ya)", "execution_count": 99, "cell_type": "code"}, {"metadata": {}, "source": "# Lets Predict:", "cell_type": "markdown"}, {"metadata": {}, "source": "# On Thursday in Brooklyn, Sector \"P\" What possible can happen based on prediction?\nCaution: Only if you are subject to any crime, prediction of crime is likely to happen.", "cell_type": "markdown"}, {"outputs": [{"name": "stderr", "output_type": "stream", "text": "C:\\Users\\rajag\\Anaconda3\\lib\\site-packages\\sklearn\\utils\\validation.py:395: DeprecationWarning: Passing 1d arrays as data is deprecated in 0.17 and will raise ValueError in 0.19. Reshape your data either using X.reshape(-1, 1) if your data has a single feature or X.reshape(1, -1) if it contains a single sample.\n  DeprecationWarning)\n"}, {"execution_count": 109, "output_type": "execute_result", "metadata": {}, "data": {"text/plain": "array([[ 7.,  3.,  3.]])"}}], "metadata": {"collapsed": false, "trusted": false}, "source": "multi_target_forest.predict(X[199])", "execution_count": 109, "cell_type": "code"}, {"metadata": {}, "source": "\n\n", "cell_type": "markdown"}, {"metadata": {"collapsed": true}, "source": "### Data dictionary: \n'BURGLARY' : 1,'FELONY ASSAULT':2,'GRAND LARCENY':3,'GRAND LARCENY OF MOTOR VEHICLE':4,\n\t'MURDER & NON-NEGL. MANSLAUGHTE':5,'RAPE':6,'ROBBERY':7\n", "cell_type": "markdown"}, {"metadata": {}, "source": "### Inference:\nFrom the above prediction we can tell that a person can be subject Robbery or Grandlarceny of motor vehilce, but most likely can be subject to Grand larceny of motor vehiles.  ", "cell_type": "markdown"}, {"metadata": {}, "source": "# Conclusion:\nThis prediction model can be questionable of practicality, but I believe this is a stepping stone for further analysis because many innovative analysis can be build on this. \nFinally, compared to diffrent models, if such a question (as mentioned above) arises, this would be one of few optimal ways to solve the problem.", "cell_type": "markdown"}], "nbformat_minor": 0, "nbformat": 4}